{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nconst useInfiniteScroll = callback => {\n  _s();\n  const [isFetching, setIsFetching] = useState(false);\n  const [isBottom, setIsBottom] = useState(false);\n  const observer = useRef();\n  useEffect(() => {\n    observer.current = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          setIsBottom(true);\n        }\n      });\n    }, {\n      threshold: 1\n    });\n    if (observer.current && !isFetching) {\n      observer.current.observe(document.querySelector('#scrollObserver'));\n    }\n    return () => {\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n    };\n  }, [isFetching]);\n  useEffect(() => {\n    if (isBottom) {\n      setIsFetching(true);\n      setIsBottom(false);\n      callback(() => setIsFetching(false));\n    }\n  }, [isBottom, callback]);\n  return [isFetching];\n};\n_s(useInfiniteScroll, \"2gphXZrg7ehwjU3kp01t/GvPg3w=\");\nexport default useInfiniteScroll;","map":{"version":3,"names":["useState","useEffect","useRef","useInfiniteScroll","callback","_s","isFetching","setIsFetching","isBottom","setIsBottom","observer","current","IntersectionObserver","entries","forEach","entry","isIntersecting","threshold","observe","document","querySelector","disconnect"],"sources":["/Users/mperi/Documents/ecommerce/src/hooks/useInfiniteScroll.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nconst useInfiniteScroll = (callback) => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [isBottom, setIsBottom] = useState(false);\n\n  const observer = useRef();\n  useEffect(() => {\n    observer.current = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            setIsBottom(true);\n          }\n        });\n      },\n      { threshold: 1 }\n    );\n\n    if (observer.current && !isFetching) {\n      observer.current.observe(document.querySelector('#scrollObserver'));\n    }\n\n    return () => {\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n    };\n  }, [isFetching]);\n\n  useEffect(() => {\n    if (isBottom) {\n      setIsFetching(true);\n      setIsBottom(false);\n      callback(() => setIsFetching(false));\n    }\n  }, [isBottom, callback]);\n\n  return [isFetching];\n};\n\nexport default useInfiniteScroll;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEnD,MAAMC,iBAAiB,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMU,QAAQ,GAAGR,MAAM,CAAC,CAAC;EACzBD,SAAS,CAAC,MAAM;IACdS,QAAQ,CAACC,OAAO,GAAG,IAAIC,oBAAoB,CACzCC,OAAO,IAAI;MACTA,OAAO,CAACC,OAAO,CAACC,KAAK,IAAI;QACvB,IAAIA,KAAK,CAACC,cAAc,EAAE;UACxBP,WAAW,CAAC,IAAI,CAAC;QACnB;MACF,CAAC,CAAC;IACJ,CAAC,EACD;MAAEQ,SAAS,EAAE;IAAE,CACjB,CAAC;IAED,IAAIP,QAAQ,CAACC,OAAO,IAAI,CAACL,UAAU,EAAE;MACnCI,QAAQ,CAACC,OAAO,CAACO,OAAO,CAACC,QAAQ,CAACC,aAAa,CAAC,iBAAiB,CAAC,CAAC;IACrE;IAEA,OAAO,MAAM;MACX,IAAIV,QAAQ,CAACC,OAAO,EAAE;QACpBD,QAAQ,CAACC,OAAO,CAACU,UAAU,CAAC,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,CAACf,UAAU,CAAC,CAAC;EAEhBL,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,EAAE;MACZD,aAAa,CAAC,IAAI,CAAC;MACnBE,WAAW,CAAC,KAAK,CAAC;MAClBL,QAAQ,CAAC,MAAMG,aAAa,CAAC,KAAK,CAAC,CAAC;IACtC;EACF,CAAC,EAAE,CAACC,QAAQ,EAAEJ,QAAQ,CAAC,CAAC;EAExB,OAAO,CAACE,UAAU,CAAC;AACrB,CAAC;AAACD,EAAA,CArCIF,iBAAiB;AAuCvB,eAAeA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}